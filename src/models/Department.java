package models;

import java.util.ArrayList;
import java.util.List;

import exceptions.MineNotFoundException;
import models.utils.RandomizeGenerator;

public class Department {
	private DepartmentName name;
	private List<Mine> listMine;
	private int budgetDepartment;

	public Department(DepartmentName name, int budgetDepartment) {
		this.name = name;
		this.budgetDepartment = budgetDepartment;
		listMine = new ArrayList<>();
		autoGenerateData();
	}

	public String getName() {
		return name.getName();
	}

	public int getBudgetDepartment() {
		return budgetDepartment;
	}

	public List<Mine> getListMine() {
		return listMine;
	}

	public void autoGenerateData() {
		for (int i = 0; i < 3; i++) {
			listMine.add(new Mine(RandomizeGenerator.generateRandomName(), RandomizeGenerator.generateRandomInt(1, 200),
					RandomizeGenerator.generateRandomOreType(), RandomizeGenerator.generateRandomInt(100, 5000), i,
					RandomizeGenerator.generateRandomMineType(), RandomizeGenerator.generateRandomInt(2000, 10000)));
		}
	}

	public void addMine(Mine mine) {
		budgetDepartment -= mine.getBudgetMine();
		listMine.add(mine);
	}

	public Mine searchMine(int id) throws MineNotFoundException {
		for (int i = 0; i < listMine.size(); i++) {
			if (listMine.get(i).getId() == id) {
				return listMine.get(i);
			}
		}
		throw new MineNotFoundException();
	}

	public int searchPositionMine(int id) throws MineNotFoundException {
		for (int i = 0; i < listMine.size(); i++) {
			if (listMine.get(i).getId() == id) {
				return i;
			}
		}
		throw new MineNotFoundException();
	}

	public void removeMine(int id) throws MineNotFoundException {
		int positionFound = searchPositionMine(id);
		budgetDepartment += listMine.get(positionFound).getBudgetMine();
		listMine.remove(positionFound);
	}

	public Object[] toObjectVector() {
		return new Object[] { name.getName(), budgetDepartment };
	}

	public Object[][] toObjectMatrix() {
		Object[][] matrix = new Object[listMine.size()][];
		int counter = 0;
		for (Mine mine : listMine) {
			matrix[counter] = mergeVectors(toObjectVector(), mine.toObjectVector());
			counter++;
		}
		return matrix;
	}

	public Object[] mergeVectors(Object[] vectorOne, Object[] vectorTwo) {
		Object[] finalVector = new Object[vectorOne.length + vectorTwo.length];
		System.arraycopy(vectorOne, 0, finalVector, 0, vectorOne.length);
		System.arraycopy(vectorTwo, 0, finalVector, vectorOne.length, vectorTwo.length);
		return finalVector;
	}
}
